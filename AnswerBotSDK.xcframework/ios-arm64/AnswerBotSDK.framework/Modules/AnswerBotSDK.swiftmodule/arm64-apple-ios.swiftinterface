// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AnswerBotSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AnswerBotProvidersSDK
@_exported import AnswerBotSDK
import CommonUISDK
import DeveloperToolsSupport
import Foundation
import MessagingAPI
import SDKConfigurations
import SupportProvidersSDK
import Swift
import SwiftUI
import UIKit
import WebKit
import ZendeskCoreSDK
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol InteractionDataProtocol {
  var deflectionId: Swift.Int64 { get }
  var interactionAccessToken: Swift.String { get }
}
public struct InteractionData : AnswerBotSDK.InteractionDataProtocol, Swift.Equatable {
  public let deflectionId: Swift.Int64
  public let interactionAccessToken: Swift.String
  public init(deflectionId: Swift.Int64, interactionAccessToken: Swift.String)
  public static func == (a: AnswerBotSDK.InteractionData, b: AnswerBotSDK.InteractionData) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc(ZDKAnswerBotEngine) final public class AnswerBotEngine : ObjectiveC.NSObject, MessagingAPI.Engine {
  final public let id: Swift.String
  final public let transferOptionDescription: MessagingAPI.TransferOptionDescription
  final public var onUpdate: ([MessagingAPI.ObservableIdentifier : (MessagingAPI.Update) -> Swift.Void])
  @available(*, deprecated, message: "Use isConversationOngoing(_ completion: @escaping (Bool) -> Void) instead")
  final public func isConversationOngoing() -> Swift.Bool
  @objc final public func isConversationOngoing(_ completion: @escaping (Swift.Bool) -> Swift.Void)
  final public func start(messagingAPI: any MessagingAPI.MessagingAPIProtocol)
  final public func stop()
  final public func onEvent(_ event: MessagingAPI.Event)
  @objc public static func engine() throws -> AnswerBotSDK.AnswerBotEngine
  @objc deinit
}
extension AnswerBotSDK.AnswerBotEngine : MessagingAPI.Observable {
  final public func observeUpdates(_ callback: @escaping (MessagingAPI.Update) -> Swift.Void) -> MessagingAPI.ObservationToken
  public typealias Observable = MessagingAPI.Update
}
